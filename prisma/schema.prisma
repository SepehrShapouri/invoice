generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
// Better Auth required tables
model user {
  id                    String   @id
  name                  String
  email                 String   @unique
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  
  // Invoicely specific fields
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  stripeAccountId       String?  // Stripe Connect
  plan                  String   @default("free") // "free", "monthly", "annual"
  invoicesSentThisMonth Int      @default(0)
  
  // Subscription management
  subscriptionStatus    String?  // "active", "canceled", "past_due", "unpaid"
  subscriptionCurrentPeriodStart DateTime?
  subscriptionCurrentPeriodEnd   DateTime?
  subscriptionCancelAtPeriodEnd  Boolean  @default(false)
  stripePriceId         String?  // The Stripe price ID for current subscription
  
  // Stripe Connect fields
  stripeAccountStatus String? // "pending", "active", "rejected"
  stripeOnboardingUrl String?
  
  // Relations
  invoices              Invoice[]
  accounts              account[]
  sessions              session[]
}

model account {
  id                String  @id
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime
  updatedAt         DateTime
  
  user              user @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  
  user      user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime
}

// Invoicely business models
model Invoice {
  id          String   @id @default(cuid())
  slug        String   @unique
  user        user     @relation(fields: [userId], references: [id])
  userId      String
  clientName  String
  clientEmail String
  items       Json     // Array of {description, quantity, rate, amount}
  subtotal    Float
  tax         Float?   @default(0)
  total       Float
  currency    String   @default("usd")
  status      String   @default("unpaid") // unpaid, paid, overdue, draft
  dueDate     DateTime?
  paidAt      DateTime?
  
  // Stripe
  stripePaymentIntentId String?
  stripeCheckoutSessionId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
